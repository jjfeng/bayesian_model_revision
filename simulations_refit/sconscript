import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

NUM_SEEDS = localenv['num_seeds']
NUM_CHANGE = 6
INIT_TRAIN = 300
TEST_BATCH = 10
HIST_BATCH = 50

nest.add(
    'num_p',
    [10],
    label_func=lambda c: "num_p_%d" % c)

nest.add(
    'init_beta',
    [0.35],
    label_func=lambda c: "beta_%.2f" % c)

nest.add(
    'simulation',
    [
	'iid_big_deteriorate',
        'very_deteriorate',
    ])

nest.add(
    'recalib',
    # Amount of recalibration data should depend on how many variables there are
    [100],
    label_func=lambda c: "recalib_%d" % c)

nest.add_aggregate("summary_res_combo_refit", list)
nest.add_aggregate("summary_res_combo_boxed", list)
nest.add_aggregate("summary_res_refit", list)
nest.add_aggregate("summary_res_boxed", list)
nest.add(
    'seed',
    range(NUM_SEEDS),
    label_func=lambda c: "seed_%d" % c)

@nest.add_target_with_env(localenv)
def generate_data(env, outdir, c):
    cmd = [
        'python generate_data_single_pop.py',
        '--meta-seed 3',
        '--data-seed',
	100 + c['seed'],
        '--sparse',
        c['num_p'],
        '--p',
        c['num_p'],
        '--change',
        NUM_CHANGE,
        '--test-n 4000',
        '--init-perturb 0.15',
        '--init-sparse-beta',
        c['init_beta'],
        '--init-train-n',
        INIT_TRAIN,
        '--init-recalib-n',
        c['recalib'],
        '--simulation',
	c['simulation'],
	'--out ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'data.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'model_sim',
    [
    	'combo_refit', # This is a reasonably good model
    	'combo_boxed', # This is a bad model
    ])

nest.add(
    'refit_freq',
    [
        2],
    label_func=lambda c: "refit_%d" % c)

@nest.add_target_with_env(localenv)
def create_modeler(env, outdir, c):
    cmd = [
        'python create_modeler.py',
        '--seed',
	c['seed'],
        '--max-box %d,%d' % (INIT_TRAIN//4, INIT_TRAIN//10)  if 'boxed' in c['model_sim'] else '',
        '--switch-time 100' if 'boxed' in c['model_sim'] else '',
        '--max-depth 2',
        '--n-estimators 1000',
        '--refit-freq',
        c['refit_freq'],
        '--simulation',
        c['model_sim'],
	'--data ${SOURCES[0]}',
	'--out ${TARGETS[0]}'
    ]
    return env.Command(
        [
            join(outdir, 'models.pkl')],
        c["generate_data"],
        ' '.join(map(str, cmd)))

nest.add(
    'type_i_regret',
    [
        0.05,
    ],
    label_func=lambda c: "type_i_regret_%.2f" % c)

nest.add(
    'inflation',
    [
        0.003],
    label_func=lambda c: "inflat_%.3f" % c)


@nest.add_target_with_env(localenv)
def do_online_recalib(env, outdir, c):
    cmd = [
        'python main.py',
        '--seed',
	c['seed'],
        '--type-i-regret',
        c['type_i_regret'],
        '--alphas 0.01',
        '--hist-batch',
        HIST_BATCH,
        '--test-batch',
        TEST_BATCH,
	'--max-covariance-scale 1.5',
	'--inflation 0,%.4f' % c['inflation'] if 'combo' in c['model_sim'] else '',
        '--reference',
        "locked,adam,cumulativeLR",
	'--data ${SOURCES[0]}',
	'--model ${SOURCES[1]}',
	'--scores-file ${TARGETS[0]}',
	'--obs-scores-file ${TARGETS[3]}',
    	'--recalibrators-file ${TARGETS[4]}',
	'--history-file ${TARGETS[1]}',
	'--log ${TARGETS[2]}',
    ]
    return env.Command(
        [
            join(outdir, 'eci.csv'),
            join(outdir, 'history.csv'),
            join(outdir, 'log.txt'),
            join(outdir, 'obs_calib_scores.csv'),
            join(outdir, 'recalibrators.pkl')],
        c["generate_data"][:1] + c["create_modeler"],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_eci(env, outdir, c):
    cmd = [
        'python plot_calibration_scores.py',
	'--plot-measures eci,auc',
	'--scores ${SOURCES[0]}',
	'--obs-scores ${SOURCES[3]}',
	'--recalibrators-file ${SOURCES[4]}',
	'--out-fig ${TARGETS[0]}',
    ]
    return env.Command(
        [
            join(outdir, 'eci.png'),
        ],
        c["do_online_recalib"],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_thetas(env, outdir, c):
    cmd = [
        'python plot_thetas.py',
	'--is-evolving-labels',
	#'--show-legend',
	'--plot-recalib BLR,marBLR',
	'--recalibrators ${SOURCES[4]}',
	'--out-fig-idx ${TARGETS[0]}',
	'--out-fig-time ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'thetas_idx.png'),
            join(outdir, 'thetas_time.png'),
        ],
        c["do_online_recalib"],
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def summarize_scores(env, outdir, c):
    cmd = [
        'python summarize_scores.py',
	'--scores ${SOURCES[0]}',
	'--recalibrator ${SOURCES[4]}',
	'--out-csv ${TARGETS[0]}',
    ]
    targets = [join(outdir, 'avg_res.csv')]
    c['summary_res_%s' % c['model_sim']].append(targets[0])
    return env.Command(
        targets,
        c["do_online_recalib"],
        ' '.join(map(str, cmd)))
nest.pop("seed")

@nest.add_target_with_env(localenv)
def summarize_combo_refit(env, outdir, c):
    cmd = [
        'python summarize.py',
	'--id-cols',
	'mdl,pop_idx,measure',
	'--pivot-cols',
	'measure,pop_idx',
	'--pivot-rows',
	'mdl',
	'--measure-filter',
	'eci,nll,auc',
	'--pop-idx-filter',
	'All',
	'--results',
        ",".join(["simulations_refit/%s" % r for r in c['summary_res_combo_refit']]),
	'--out-csv ${TARGETS[0]}',
    ]
    return env.Command(
        [
            join(outdir, 'res_summary_combo_refit.csv'),
        ],
        c["summary_res_combo_refit"],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def summarize_combo_boxed(env, outdir, c):
    cmd = [
        'python summarize.py',
	'--id-cols',
	'mdl,pop_idx,measure',
	'--pivot-cols',
	'measure,pop_idx',
	'--pivot-rows',
	'mdl',
	'--measure-filter',
	'eci,nll,auc',
	'--pop-idx-filter',
	'All',
	'--results',
        ",".join(["simulations_refit/%s" % r for r in c['summary_res_combo_boxed']]),
	'--out-csv ${TARGETS[0]}',
    ]
    return env.Command(
        [
            join(outdir, 'res_summary_combo_boxed.csv'),
        ],
        c["summary_res_boxed"],
        ' '.join(map(str, cmd)))
